package e_accessment_nmf;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Scanner;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import nmf.Nmf;
import java.util.Vector;
import nmf.Variables;
import pso.PSOProcess;
import javax.swing.JOptionPane;
import nmf.Lsa;
import nmf.Pso;
import javax.swing.Timer;
import org.apache.log4j.Level;
import java.util.GregorianCalendar;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Oginni
 */
public class Lecturer extends javax.swing.JFrame {

    /**
     * Creates new form Lecturer
     */
    String table1Q = "";
    String table1A = "";
    String table2 = "";
    String table3 = "";
    String theFourth = "";
    final static Charset ENCODING = StandardCharsets.UTF_8;
    Nmf nmf;
    Lsa lsa;
    Pso pso;
    Variables var;
    Vector<String> H = new Vector<>();
    Vector<String> W = new Vector<>();
    Vector<String> V = new Vector<>();
    Vector<String> E = new Vector<>();
    int a = 0;
    Timer t;
    int kl = 0;
    int output = 0;
    String al;
    String ans = "";
    long starttime;
    long stoptime;

    public Lecturer() throws Exception {
        initComponents();
        var = new Variables();


        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    nmf = new Nmf();
                    lsa = new Lsa();
                    pso = new Pso();
                    DefaultListModel dl = new DefaultListModel();
                    for (String str : listFileInFolder("data/Answer/1/").split("\n")) {
                        dl.addElement(str);
                    }
                    jList1.setModel(dl);
                    readFile("data/Answer/lecturer.txt", "data/Question/question.txt", jTable2);
                    //                    readFile2("data/corpus1.txt", jTable3);
                    //                   readFile3("data/Answer/lecturer.txt", jTable4);
                } catch (Exception ex) {
                    //  Logger.getLogger(Lecturer.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });
        //jButton2ActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea6 = new javax.swing.JTextArea();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTextArea7 = new javax.swing.JTextArea();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTextArea8 = new javax.swing.JTextArea();
        jLabel18 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTextArea9 = new javax.swing.JTextArea();
        jLabel19 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(null);

        jPanel2.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 102, 255));
        jLabel1.setText("QUESTIONS");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(520, 10, 210, 37);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Question", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14), java.awt.Color.white)); // NOI18N
        jScrollPane1.setViewportView(jTextArea1);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(440, 120, 560, 140);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Answer:");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(440, 100, 140, 20);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Question: ");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(30, 100, 140, 20);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Question", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14), java.awt.Color.white)); // NOI18N
        jScrollPane2.setViewportView(jTextArea2);

        jPanel2.add(jScrollPane2);
        jScrollPane2.setBounds(30, 120, 390, 140);

        jButton1.setText("Set");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);
        jButton1.setBounds(1010, 210, 100, 50);

        jLabel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Set Question")));
        jPanel2.add(jLabel5);
        jLabel5.setBounds(10, 70, 1110, 200);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTable2.setFont(new java.awt.Font("DejaVu Serif", 1, 10)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        jPanel2.add(jScrollPane3);
        jScrollPane3.setBounds(14, 274, 1100, 290);

        jTabbedPane1.addTab("Set Question ", jPanel2);

        jPanel4.setLayout(null);

        jLabel9.setFont(new java.awt.Font("Tw Cen MT", 1, 36)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 102, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("LSA PSO ACO NMF Document Terms Weighting");
        jPanel4.add(jLabel9);
        jLabel9.setBounds(360, 10, 760, 37);

        jTextArea5.setEditable(false);
        jTextArea5.setColumns(20);
        jTextArea5.setLineWrap(true);
        jTextArea5.setRows(5);
        jTextArea5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Question", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14), java.awt.Color.white)); // NOI18N
        jScrollPane7.setViewportView(jTextArea5);

        jPanel4.add(jScrollPane7);
        jScrollPane7.setBounds(10, 50, 300, 120);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Lecturer Answers:");
        jPanel4.add(jLabel10);
        jLabel10.setBounds(10, 170, 140, 20);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Questions: ");
        jPanel4.add(jLabel11);
        jLabel11.setBounds(20, 30, 140, 20);

        jComboBox1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel4.add(jComboBox1);
        jComboBox1.setBounds(90, 330, 56, 20);

        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jList1);

        jPanel4.add(jScrollPane4);
        jScrollPane4.setBounds(5, 380, 110, 190);

        jTextArea6.setEditable(false);
        jTextArea6.setColumns(20);
        jTextArea6.setLineWrap(true);
        jTextArea6.setRows(5);
        jTextArea6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Question", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14), java.awt.Color.white)); // NOI18N
        jScrollPane8.setViewportView(jTextArea6);

        jPanel4.add(jScrollPane8);
        jScrollPane8.setBounds(10, 190, 300, 130);

        jTextArea7.setEditable(false);
        jTextArea7.setColumns(20);
        jTextArea7.setRows(5);
        jTextArea7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Process", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 0, 10), java.awt.Color.black)); // NOI18N
        jScrollPane10.setViewportView(jTextArea7);

        jPanel4.add(jScrollPane10);
        jScrollPane10.setBounds(360, 90, 500, 460);

        jLabel16.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel16.setText("Procesing Log:");
        jPanel4.add(jLabel16);
        jLabel16.setBounds(860, 60, 140, 20);

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel17.setText("Answers:");
        jPanel4.add(jLabel17);
        jLabel17.setBounds(130, 360, 80, 20);

        jTextArea8.setEditable(false);
        jTextArea8.setColumns(20);
        jTextArea8.setLineWrap(true);
        jTextArea8.setRows(5);
        jTextArea8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Question", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14), java.awt.Color.white)); // NOI18N
        jScrollPane11.setViewportView(jTextArea8);

        jPanel4.add(jScrollPane11);
        jScrollPane11.setBounds(130, 380, 190, 190);

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel18.setText("Students");
        jPanel4.add(jLabel18);
        jLabel18.setBounds(10, 360, 60, 20);

        jLabel12.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Set Question")));
        jPanel4.add(jLabel12);
        jLabel12.setBounds(0, 10, 330, 570);

        jButton2.setText("Train Doc");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton2);
        jButton2.setBounds(1020, 550, 100, 30);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Question No:");
        jPanel4.add(jLabel4);
        jLabel4.setBounds(10, 330, 70, 14);

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("LSA");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(jRadioButton1);
        jRadioButton1.setBounds(670, 550, 70, 30);

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("LSA-PSO-ACO-NMF");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });
        jPanel4.add(jRadioButton2);
        jRadioButton2.setBounds(840, 550, 140, 30);

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("NMF");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });
        jPanel4.add(jRadioButton3);
        jRadioButton3.setBounds(760, 550, 60, 30);

        jLabel6.setText("Algorithms:");
        jPanel4.add(jLabel6);
        jLabel6.setBounds(590, 550, 90, 30);

        jLabel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        jPanel4.add(jLabel7);
        jLabel7.setBounds(580, 550, 420, 30);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jPanel4.add(jLabel8);
        jLabel8.setBounds(360, 550, 150, 30);

        jTextArea9.setEditable(false);
        jTextArea9.setBackground(new java.awt.Color(51, 51, 51));
        jTextArea9.setColumns(20);
        jTextArea9.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jTextArea9.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea9.setRows(5);
        jTextArea9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Process Log", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 0, 10), java.awt.Color.white)); // NOI18N
        jScrollPane12.setViewportView(jTextArea9);

        jPanel4.add(jScrollPane12);
        jScrollPane12.setBounds(860, 90, 260, 460);

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel19.setText("GENRATED DATA:");
        jPanel4.add(jLabel19);
        jLabel19.setBounds(360, 60, 220, 20);

        jTabbedPane1.addTab("Train Answers", jPanel4);

        jPanel1.add(jTabbedPane1);
        jTabbedPane1.setBounds(0, 0, 1130, 610);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1136, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE)
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1152)/2, (screenSize.height-656)/2, 1152, 656);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int i = table1A.split("\n").length;
        try {
            writeFile("data/Question/question.txt", table1Q + jTextArea2.getText());
            writeFile("data/Answer/" + i + "/lecturer.txt", jTextArea1.getText());
            writeFile("data/Answer/lecturer.txt", table1A + jTextArea1.getText());
            jTextArea2.setText("");
            jTextArea1.setText("");
            readFile("data/Answer/lecturer.txt", "data/Question/question.txt", jTable2);
        } catch (Exception e) {
            e.printStackTrace();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        try {
            readFile2(jList1.getSelectedValue().toString());
        } catch (Exception e) {

            e.printStackTrace();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jList1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        output = 0;
        starttime = new GregorianCalendar().getTimeInMillis();
        t = new Timer(250, reload);
        t.start();

        jLabel8.setText(" RUNNING . . .");
        try {
            new Thread(new timer()).start();
        } catch (Exception e) {
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        if (jComboBox1.isFocusOwner() && jComboBox1.getSelectedIndex() != -1) {
            try {
                DefaultListModel dl = new DefaultListModel();
                for (String str : listFileInFolder("data/Answer/" + jComboBox1.getSelectedItem().toString() + "/").split("\n")) {
                    dl.addElement(str.replace(".txt", ""));
                }
                jList1.setModel(dl);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        a = 1;
        al = "LSA";
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        a = 2;
        al = "NMF";
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        a = 3;
        al = "LSA->PSO->ACO->NMF";
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Lecturer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Lecturer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Lecturer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Lecturer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Lecturer().setVisible(true);
                } catch (Exception ex) {
//                    Logger.getLogger(Lecturer.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    static void writeFile(String aFileName, String text) throws IOException {
        try {
            PrintWriter writer = new PrintWriter(aFileName, "UTF-8");
            writer.println(text);
            writer.flush();
            writer.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    void readFile(String aFileName, String qFileName, JTable table) throws IOException {
        jTextArea5.setText("");
        jTextArea6.setText("");
        Path path = Paths.get(aFileName);
        Path path2 = Paths.get(qFileName);
        String eachLine = "";
        String eachLine2 = "";
        int i = 0;
        try {
            Scanner scanner = new Scanner(path, ENCODING.name());
            Scanner scanner2 = new Scanner(path2, ENCODING.name());
            DefaultTableModel dm = new DefaultTableModel();
            DefaultTableModel dm2 = new DefaultTableModel();
            dm.addColumn("SN");
            dm.addColumn("QUESTION");
            dm2.addColumn("SN");
            dm2.addColumn("QUESTION");
            dm.addColumn("ANSWER");
            table1A = "";
            table1Q = "";
            while (scanner.hasNextLine()) {
                eachLine = scanner.nextLine();
                eachLine2 = scanner2.nextLine();
                table1A += eachLine + "\n";
                table1Q += eachLine2 + "\n";

                String question = eachLine2;
                String answer = eachLine;

                Object obj[] = new Object[]{++i, question, answer};
                jTextArea5.append(i + ". " + question + "\n");
                jTextArea6.append(i + ". " + answer + "\n");
                dm.addRow(obj);

            }

            table.setModel(dm);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    void readFile2(String aFileName) throws IOException {
        Path path = Paths.get("data/Answer/" + jComboBox1.getSelectedItem() + "/" + aFileName + ".txt");
        String eachLine = "";
        jTextArea8.setText("");
        try {
            Scanner scanner = new Scanner(path, ENCODING.name());
            int i = 0;
            while (scanner.hasNextLine()) {
                eachLine = scanner.nextLine();
                jTextArea8.append(jComboBox1.getSelectedItem() + ". " + eachLine + "\n");
            }
        } catch (Exception e) {
            jTextArea8.append("no data to process");
            e.printStackTrace();
        }
    }

    public String listFileInFolder(String path) {
        File folder = new File(path);
        File[] listOfFiles = folder.listFiles();
        int i = 0;
        path = "";
        for (File file : listOfFiles) {
            if (file.isFile()) {
                // System.out.println(file.getName());
                path += file.getName().replace(".txt", "") + "\n";
            }
        }
        return path;
    }
//    void readFile3(String aFileName, JTable table) throws IOException {
//        Path path = Paths.get(aFileName);
//        String eachLine = "";
//        int i = 0;
//        try {
//            Scanner scanner = new Scanner(path, ENCODING.name());
//            DefaultTableModel dm = new DefaultTableModel();
//            dm.addColumn("SN");
//            dm.addColumn("Title");
//            while (scanner.hasNextLine()) {
//                eachLine = scanner.nextLine();
//                String answer = eachLine;
//
//                Object obj[] = new Object[]{++i, answer};
//                dm.addRow(obj);
//            }
//            table.setModel(dm);
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//    }
//    void readFile4(String aFileName, JTable table) throws IOException {
//        Path path = Paths.get(aFileName);
//        String eachLine = "";
//        String quest = "";
//        String ans = "";
//        String ans1 = "";
//        int i = 0;
//        try {
//            Scanner scanner = new Scanner(path);
//            DefaultTableModel dm = new DefaultTableModel();
//            dm.addColumn("SN");
//            dm.addColumn("Question");
//            dm.addColumn("Lecturer's Answer");
//            dm.addColumn("Student's Answer");
//            int c = 0;
//            while (scanner.hasNextLine()) {
//                eachLine = scanner.nextLine();
//                String answer = eachLine;
//                if (answer.startsWith("Question:")) {
//                    quest = answer.replace("Question: ", "");
//                    c = 1;
//                }
//                if (answer.startsWith("Original:")) {
//                    ans = answer.replace("Original: ", "");
//                    c++;
//                }
//                if (answer.startsWith("Answer:")) {
//                    ans1 = answer.replace("Answer: ", "");
//                    c++;
//                }
//                if (c == 3) {
//                    c = 0;
//                    Object obj[] = new Object[]{++i, quest, ans, ans1};
//                    dm.addRow(obj);
//                }
//
//            }
//            table.setModel(dm);
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//    }
//
//    void readFile5(String aFileName, JTable table, String answer1, String answer2) throws IOException {
//        Path path = Paths.get(aFileName);
//        String eachLine = "";
//        boolean readIt = false;
//        String quest = "";
//        String ans = "";
//        String ans1 = "";
//        int i = 0;
//        try {
//            Scanner scanner = new Scanner(path, ENCODING.name());
//            while (scanner.hasNextLine()) {
//                eachLine = scanner.nextLine();
//                String answer = eachLine;
//                if (answer.startsWith("NMF PROJECTILE")) {
//                    algo = new LSA1("nmf", answer1, answer2);
////                    Runtime rt = Runtime.getRuntime();
////                    String[] cmd = new String[3];
////                    cmd[0] = "cmd.exe";
////                    cmd[1] = "/C";
////                    cmd[2] = aFileName;
////                    Process proc = rt.exec(cmd);
////                    int exitVal = proc.waitFor();
////                   
//
//                }
//                if (answer.startsWith("LSA PROJECTILE")) {
//                    algo = new LSA1("lsa", answer1, answer2);
////                    Runtime rt = Runtime.getRuntime();
////                    String[] cmd = new String[3];
////                    cmd[0] = "cmd.exe";
////                    cmd[1] = "/C";
////                    cmd[2] = "data/Answer/answer.txt";
////                    Process proc = rt.exec(cmd);
////                    int exitVal = proc.waitFor();
////                    jLabel18.setText(":" + var.getMatchWord().split("\n").length);
////                    jLabel19.setText(":" + var.getCorpusList().split("\n").length);
////                    jLabel20.setText(":" + var.getNmfProjectile().split("\n").length);
//                }
//            }
//
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextArea jTextArea6;
    private javax.swing.JTextArea jTextArea7;
    private javax.swing.JTextArea jTextArea8;
    private javax.swing.JTextArea jTextArea9;
    // End of variables declaration//GEN-END:variables

    class timer implements Runnable {

        @Override
        public void run() {
            try {
                long start_time = new GregorianCalendar().getTimeInMillis();
                if (a == 0) {
                    JOptionPane.showMessageDialog(rootPane, "Please Select and Algorithm !!!");
                    jLabel8.setText("WAITING . . .");
                    stoptime = new GregorianCalendar().getTimeInMillis();
                    return;
                } else if (a == 1) {
                    ans = lsa.trainData("data/Answer/" + jComboBox1.getSelectedItem().toString());

                    writeFile("data/train/" + jComboBox1.getSelectedItem().toString() + "/lsa.txt", ans);
                    writeFile("data/train/" + jComboBox1.getSelectedItem().toString() + "/train.txt", ans);
                    stoptime = new GregorianCalendar().getTimeInMillis();
                    return;
                } else if (a == 2) {
                    ans = nmf.trainData("data/Answer/" + jComboBox1.getSelectedItem().toString());
                    writeFile("data/train/" + jComboBox1.getSelectedItem().toString() + "/nmf.txt", ans);
                    writeFile("data/train/" + jComboBox1.getSelectedItem().toString() + "/train.txt", ans);
                    stoptime = new GregorianCalendar().getTimeInMillis();
                    return;
                } else if (a == 3) {
                    ans = nmf.trainData("data/Answer/" + jComboBox1.getSelectedItem().toString());

                    writeFile("data/train/" + jComboBox1.getSelectedItem().toString() + "/nmf.txt", ans);
                    writeFile("data/train/" + jComboBox1.getSelectedItem().toString() + "/train.txt", ans);
                    writeFile("data/train/" + jComboBox1.getSelectedItem().toString() + "/pso.txt", "");

                }



                String v;
                String h;
                String w;
                String e;
                Vector<Double> Vv = new Vector<>();
                Vector<Double> Wv = new Vector<>();
                Vector<Double> Hv = new Vector<>();
                Vector<Double> Ev = new Vector<>();




                int dimi = var.getU().trim().split("\n").length;
                int dimj = var.getU().trim().split("\n")[1].split(" ").length;
                v = var.getV().replace("\n", " ");
                h = var.getA().replace("\n", " ");
                w = var.getU().replace("\n", " ");
                e = var.getE().replace("\n", " ");
                System.out.println("V");
                for (int i = 1; i < v.split(" ").length; i++) {
                    if (!v.split(" ")[i].isEmpty()) {
                        Vv.addElement(Double.parseDouble(v.split(" ")[i]));
                        //        System.out.println(Vv.lastElement());
                    }
                }
                System.out.println("E");
                for (int i = 1; i < e.split(" ").length; i++) {
                    if (!e.split(" ")[i].isEmpty()) {
                        Ev.addElement(Double.parseDouble(e.split(" ")[i]));
                        //        System.out.println(Ev.lastElement());
                    }
                }
                int counter = 0;
                System.out.println("W");
                for (int i = 1; i < w.split(" ").length; i++) {
                    if (!w.split(" ")[i].isEmpty()) {
                        Wv.addElement(Double.parseDouble(w.split(" ")[i]));
                        //            System.out.println(Wv.lastElement());
                    }
                }



                dimi = var.getA().trim().split("\n").length;
                dimj = var.getA().trim().split("\n")[1].split(" ").length;
                counter = 0;
                System.out.println("H");
                for (int i = 1; i < h.split(" ").length; i++) {
                    if (!h.split(" ")[i].isEmpty()) {
                        Hv.addElement(Double.parseDouble(h.split(" ")[i]));
                        //                   System.out.println(Hv.lastElement());
//                    new Location(new double[]{Double.parseDouble(v.split(" ")[i]), Double.parseDouble(h.split(" ")[i])});
//                    new PSOProcess().execute(Double.parseDouble(v.split(" ")[i]), Double.parseDouble(h.split(" ")[i]), jComboBox1.getSelectedItem().toString(), dimj, dimi, ++counter);
                    }
                }


                PSOProcess.SWARM_SIZE = Wv.size();
                //PSOProcess.MAX_ITERATION = (int) (1000 / Wv.size());
                PSOProcess.Wv = Wv;
                PSOProcess.Vv = Vv;
                PSOProcess.doc_acc = "\n\nW ERROR\n";
                for (int i = 0; i < Wv.size(); i++) {
                    PSOProcess.W_UPPERBOUND = Math.max(Vv.elementAt(i), Wv.elementAt(i));
                    PSOProcess.W_LOWERBOUND = Math.min(Vv.elementAt(i), Wv.elementAt(i));
                    new PSOProcess().execute(Wv.elementAt(i), Vv.elementAt(i), jComboBox1.getSelectedItem().toString(), dimj, dimi, i);
                }

                PSOProcess.SWARM_SIZE = Hv.size();
                //PSOProcess.MAX_ITERATION = (int) (1000 / Hv.size());
                PSOProcess.Wv = Hv;
                PSOProcess.Vv = Ev;
                PSOProcess.doc_acc += "\n\nH ERROR\n";
                for (int i = 0; i < Hv.size(); i++) {
                    PSOProcess.W_UPPERBOUND = Math.max(Ev.elementAt(i), Hv.elementAt(i));
                    PSOProcess.W_LOWERBOUND = Math.min(Ev.elementAt(i), Hv.elementAt(i));
                    new PSOProcess().execute(Hv.elementAt(i), Ev.elementAt(i), jComboBox1.getSelectedItem().toString(), dimj, dimi, i);
                }


                ans = pso.trainData("data/Answer/" + jComboBox1.getSelectedItem().toString());
                ans += "\n" + PSOProcess.doc_acc;
                jTextArea7.append(ans);
                writeFile("data/train/" + jComboBox1.getSelectedItem().toString() + "/pso-nmf.txt", ans);
                writeFile("data/train/" + jComboBox1.getSelectedItem().toString() + "/train.txt", ans);

            } catch (Exception e) {
                jTextArea7.setText("No data to treat");
                e.printStackTrace();
            }

            jLabel8.setText("FINISH . . .");
            stoptime = new GregorianCalendar().getTimeInMillis();
        }
    }
    ActionListener reload = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            load();
        }
    };

    public void load() {
        try {
            if (output++ == 0) {
                jTextArea9.append("\n==> Loading Documents Data ...");
            } else if (output == 4) {
                jTextArea9.append("\n==> Document Load Successful ...");
            } else if (output == 6) {
                jTextArea9.append("\n==> Analying Compound Words ...");
            } else if (output == 8) {
                jTextArea9.append("\n==> Stripping Stop Words ...");
            } else if (output == 10) {
                jTextArea9.append("\n==> Stemming ...");
            } else if (output == 12) {
                jTextArea9.append("\n==> Retriving Metadata inform from DB ...");
            } else if (output == 14) {
                jTextArea9.append("\n==> Initializing " + al + " ...");
            } else if (output == 16) {
                jTextArea9.append("\n==> Stripping Puntuation Marks ...");
            } else if (output == 17) {
                jTextArea9.append("\n==> Genrating Analogies ...");
            } else if (output == 20) {
                jTextArea9.append("\n==> Compiling Word Waiting Terms ...");
            } else if (output == 21) {
                jTextArea9.append("\n==> Preparing Matrix Waiting Terms ...");
            } else if (output == 23) {
                jTextArea9.append("\n==> Calculating Corpus\n==>word match Terms ...");
            } else if (output == 26) {
                jTextArea9.append("\n==> Applying " + al + " ...");
            } else if (output == 28) {
                jTextArea9.append("\n==> Staring Operation based similarity on " + al + " ...");
            } else if (output == 30) {
                jTextArea9.append("\n==> Ends Operation based similarity on " + al);
            } else if (output == 31) {
                jTextArea9.append("\n==> Buffering output to file");
            } else if (output == 35) {
                jTextArea9.append("\n==> Finished Buffering output to file");
            } else if (output == 36) {
                if (a == 3) {
                    jLabel8.setText("Processing . . .");
                    t.stop();
                    return;
                }
                jTextArea7.setText(ans);
                jLabel8.setText("FINISHED . . .");
                t.stop();
            }
            System.out.println(output);

        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }
}
